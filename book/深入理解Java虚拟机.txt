深入理解Java虚拟机
1.走进Java
在武侠的世界里，无论是至刚至强的《易筋经》，还是阴柔无比的《葵花宝典》，都离不开内功修炼。
没有了内功心法，这些武术只是花拳绣腿的拙劣表演而已。
软件业是武林江湖的一个翻版，也有着大量的模式、套路、规范等外功，但“外功修行，内功修神”，要想成为“扫地僧”一样的绝世高人，此书是必备的。——秦小波 资深Java技术专家/著有畅销书《设计模式之禅》

因为程序员把内存控制的权力交给了Java虚拟机， 所以可以在编码的时候享受自动内存管理的诸多优势， 不过
也正是这个原因， 一旦出现内存泄漏和溢出方面的问题， 如果不了解虚拟机是怎样使用内存的， 那么排查错误将会
成为一项异常艰难的工作。

第7章 介绍了类加载过程的“ 加载” 、 “ 验证” 、 “ 准备” 、 “ 解析” 和“ 初始化” 5个阶段中虚拟机分别执
行了哪些动作， 还介绍了类加载器的工作原理及其对虚拟机的意义。

Java能获得如此广泛的认可， 除了它拥有一门结构严谨、 面向对象的编程语言之外， 还有许多不可忽视的优
点： 它摆脱了硬件平台的束缚， 实现了“ 一次编写， 到处运行” 的理想； 它提供了一个相对安全的内存管理和访问
机制， 避免了绝大部分的内存泄露和指针越界问题； 它实现了热点代码检测和运行时编译及优化， 这使得Java应用
能随着运行时间的增加而获得更高的性能； 它有一套完善的应用程序接口， 还有无数来自商业机构和开源社区的第
三方类库来帮助它实现各种各样的功能……

这个版本中Java虚拟机第一次内置了JIT（ Just In Time） 编译器（ JDK 1.2中曾并存过3个虚拟
机， Classic VM、 HotSpot VM和Exact VM， 其中Exact VM只在Solaris平台出现过； 后面两个虚拟机都是内置JIT编
译器的， 而之前版本所带的Classic VM只能以外挂的形式使用JIT编译器） 

在2006年11月13日的JavaOne大会上， Sun公司宣布最终会将Java开源

Oracle
公司分别从BEA和Sun中取得了目前三大商业虚拟机的其中两个： JRockit和HotSpot,Oracle公司宣布在未来1～2年
的时间内， 将把这两个优秀的虚拟机互相取长补短， 最终合二为一[2]。

另外， 还出现了诸如Scala、 Clojure及Erlang等天生就具备并行计算能力的语言。

Scala vs Clojure:
函数是头等公民，函数可以作为参数传递，可以作为返回值返回。
scala和clojure是两门完全不同的语言，之所以不同，是因为他们的哲学是不同的。
clojure追求的是实用。scala追求的是功能强，同时结合FP和OO两种开发模型。设计思想的不同，是语言之间最大的区别。


2.自动内存管理机制
Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“ 高墙” ， 墙外面的人想进去， 墙里面的人却
想出来。

对于Java程序员来说， 在虚拟机自动内存管理机制的帮助下， 不再需要为每一个new操作去写配对的
delete/free代码， 不容易出现内存泄漏和内存溢出问题， 由虚拟机管理内存这一切看起来都很美好。 不过， 也正
是因为Java程序员把内存控制的权力交给了Java虚拟机， 一旦出现内存泄漏和溢出方面的问题， 如果不了解虚拟机
是怎样使用内存的， 那么排查错误将会成为一项异常艰难的工作


程序计数器（ Program Counter Register） 是一块较小的内存空间， 它可以看作是当前线程所执行的字节码的
行号指示器。 在虚拟机的概念模型里（ 仅是概念模型， 各种虚拟机可能会通过一些更高效的方式去实现） ， 字节码
解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令， 分支、 循环、 跳转、 异常处理、
线程恢复等基础功能都需要依赖这个计数器来完成。

由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的， 在任何一个确定的时
刻， 一个处理器（ 对于多核处理器来说是一个内核） 都只会执行一条线程中的指令。 因此， 为了线程切换后能恢复
到正确的执行位置， 每条线程都需要有一个独立的程序计数器， 各条线程之间计数器互不影响， 独立存储， 我们称
这类内存区域为“ 线程私有” 的内存

如果线程正在执行的是一个Java方法， 这个计数器记录的是正在执行的虚拟机字节码指令的地址； 如果正在执
行的是Native方法， 这个计数器值则为空（ Undefined） 。 此内存区域是唯一一个在Java虚拟机规范中没有规定任
何OutOfMemoryError情况的区域。

与程序计数器一样， Java虚拟机栈（ Java Virtual Machine Stacks） 也是线程私有的， 它的生命周期与线程
相同。 虚拟机栈描述的是Java方法执行的内存模型： 每个方法在执行的同时都会创建一个栈帧（ Stack Frame[1]）
用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息。 每一个方法从调用直至执行完成的过程， 就对应着
一个栈帧在虚拟机栈中入栈到出栈的过程。

经常有人把Java内存区分为堆内存（ Heap） 和栈内存（ Stack） ， 这种分法比较粗糙， Java内存区域的划分实
际上远比这复杂。 这种划分方式的流行只能说明大多数程序员最关注的、 与对象内存分配关系最密切的内存区域是
这两块。 其中所指的“ 堆” 笔者在后面会专门讲述， 而所指的“ 栈” 就是现在讲的虚拟机栈， 或者说是虚拟机栈中
局部变量表部分

局部变量表存放了编译期可知的各种基本数据类型（ boolean、 byte、 char、 short、 int、 float、 long、
double） 、 对象引用（ reference类型， 它不等同于对象本身， 可能是一个指向对象起始地址的引用指针， 也可能
是指向一个代表对象的句柄或其他与此对象相关的位置） 和returnAddress类型（ 指向了一条字节码指令的地
址） 。

其中64位长度的long和double类型的数据会占用2个局部变量空间（ Slot） ， 其余的数据类型只占用1个。 局部
变量表所需的内存空间在编译期间完成分配， 当进入一个方法时， 这个方法需要在帧中分配多大的局部变量空间是
完全确定的， 在方法运行期间不会改变局部变量表的大小。

在Java虚拟机规范中， 对这个区域规定了两种异常状况： 如果线程请求的栈深度大于虚拟机所允许的深度， 将
抛出StackOverflowError异常； 如果虚拟机栈可以动态扩展（ 当前大部分的Java虚拟机都可动态扩展， 只不过Java
虚拟机规范中也允许固定长度的虚拟机栈） ， 如果扩展时无法申请到足够的内存， 就会抛出OutOfMemoryError异
常。

本地方法栈（ Native Method Stack） 与虚拟机栈所发挥的作用是非常相似的， 它们之间的区别不过是虚拟机
栈为虚拟机执行Java方法（ 也就是字节码） 服务， 而本地方法栈则为虚拟机使用到的Native方法服务。 在虚拟机规
范中对本地方法栈中方法使用的语言、 使用方式与数据结构并没有强制规定， 因此具体的虚拟机可以自由实现它。
甚至有的虚拟机（ 譬如Sun HotSpot虚拟机） 直接就把本地方法栈和虚拟机栈合二为一。 与虚拟机栈一样， 本地方
法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。

对于大多数应用来说， Java堆（ Java Heap） 是Java虚拟机所管理的内存中最大的一块。 Java堆是被所有线程
共享的一块内存区域， 在虚拟机启动时创建。 此内存区域的唯一目的就是存放对象实例， 几乎所有的对象实例都在
这里分配内存。 这一点在Java虚拟机规范中的描述是： 所有的对象实例以及数组都要在堆上分配[1]， 但是随着JIT
编译器的发展与逃逸分析技术逐渐成熟， 栈上分配、 标量替换[2]优化技术将会导致一些微妙的变化发生， 所有的
对象都分配在堆上也渐渐变得不是那么“ 绝对” 了。

Java堆是垃圾收集器管理的主要区域， 因此很多时候也被称做“ GC堆” （ Garbage Collected Heap， 幸好国内
没翻译成“ 垃圾堆” ） 。 从内存回收的角度来看， 由于现在收集器基本都采用分代收集算法， 所以Java堆中还可以
细分为： 新生代和老年代； 再细致一点的有Eden空间、 From Survivor空间、 To Survivor空间等。 从内存分配的角
度来看， 线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（ Thread Local Allocation
Buffer,TLAB） 。 不过无论如何划分， 都与存放内容无关， 无论哪个区域， 存储的都仍然是对象实例， 进一步划分
的目的是为了更好地回收内存， 或者更快地分配内存。 在本章中， 我们仅仅针对内存区域的作用进行讨论， Java堆
中的上述各个区域的分配、 回收等细节将是第3章的主题


根据Java虚拟机规范的规定， Java堆可以处于物理上不连续的内存空间中， 只要逻辑上是连续的即可， 就像我
们的磁盘空间一样。 在实现时， 既可以实现成固定大小的， 也可以是可扩展的， 不过当前主流的虚拟机都是按照可
扩展来实现的（ 通过-Xmx和-Xms控制） 。 如果在堆中没有内存完成实例分配， 并且堆也无法再扩展时， 将会抛出
OutOfMemoryError异常

方法区（ Method Area） 与Java堆一样， 是各个线程共享的内存区域， 它用于存储已被虚拟机加载的类信息、
常量、 静态变量、 即时编译器编译后的代码等数据。 虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分， 但是
它却有一个别名叫做Non-Heap（ 非堆） ， 目的应该是与Java堆区分开来。

对于习惯在HotSpot虚拟机上开发、 部署程序的开发者来说， 很多人都更愿意把方法区称为“ 永久
代” （ Permanent Generation） ， 本质上两者并不等价， 仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集
扩展至方法区， 或者说使用永久代来实现方法区而已， 这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部
分内存， 能够省去专门为方法区编写内存管理代码的工作。 对于其他虚拟机（ 如BEA JRockit、 IBM J9等） 来说是
不存在永久代的概念的。 原则上， 如何实现方法区属于虚拟机实现细节， 不受虚拟机规范约束， 但使用永久代来实
现方法区， 现在看来并不是一个好主意， 因为这样更容易遇到内存溢出问题（ 永久代有-XX： MaxPermSize的上
限， J9和JRockit只要没有触碰到进程可用内存的上限， 例如32位系统中的4GB， 就不会出现问题） ， 而且有极少数
方法（ 例如String.intern（ ） ） 会因这个原因导致不同虚拟机下有不同的表现。 因此， 对于HotSpot虚拟机， 根据
官方发布的路线图信息， 现在也有放弃永久代并逐步改为采用Native Memory来实现方法区的规划了[1]， 在目前已
经发布的JDK 1.7的HotSpot中， 已经把原本放在永久代的字符串常量池移出。


Java虚拟机规范对方法区的限制非常宽松， 除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩
展外， 还可以选择不实现垃圾收集。 相对而言， 垃圾收集行为在这个区域是比较少出现的， 但并非数据进入了方法
区就如永久代的名字一样“ 永久” 存在了。 这区域的内存回收目标主要是针对常量池的回收和对类型的卸载， 一般
来说， 这个区域的回收“ 成绩” 比较难以令人满意， 尤其是类型的卸载， 条件相当苛刻， 但是这部分区域的回收确
实是必要的。 在Sun公司的BUG列表中， 曾出现过的若干个严重的BUG就是由于低版本的HotSpot虚拟机对此区域未完
全回收而导致内存泄漏。
根据Java虚拟机规范的规定， 当方法区无法满足内存分配需求时， 将抛出OutOfMemoryError异常。


jps：JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程
    对于本地虚拟机进程来说， LVMID与操作系统的进程ID（ Process Identifier,PID） 是一致的
    jps -l
    jps可以通过RMI协议查询开启了RMI服务的远程虚拟机进程状态， hostid为RMI注册表中注册的主机名。
    jps -q #只输出LVMID，省略主类的名称
    jps -m #输出虚拟机进程启动时传递给主类main()方法的函数
    jps -l #输出主类的全名，如果进程启动的是Jar包，输出Jar路径
    jps -v 输出虚拟机进程启动时候JVM参数

jstat: JVM Statistics Monitoring Tool,用于收集HotSpot虚拟机各方面的运行数据
    是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示
    本地或者远程[1]虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据， 在没有GUI图形界面， 只提供了
    纯文本控制台环境的服务器上， 它将是运行期定位虚拟机性能问题的首选工具。
    jstat命令格式为：
    jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]
    对于命令格式中的VMID与LVMID需要特别说明一下： 如果是本地虚拟机进程， VMID与LVMID是一致的
    参数interval和count代表查询间隔和次数， 如果省略这两个参数， 说明只查询一次。 假设需要每250毫秒查询
    一次进程2764垃圾收集状况， 一共查询20次， 那命令应当是：
    jstat -gc 2764 250 20
    选项option代表着用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况，具体选项以及作用见下面
    -class 监视类装载、卸载数量，总空间以及类装载所耗费的时间
    -gc   监视Java堆状况，包括Eden区，两个survivor区，老年代，永久代等的容量、已用空间、GC时间合计等信息
    -gccapacity 监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间
    -gcutil 监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比
    -gccause 与-gcutil功能一样，但是回额外输出导致上一次GC产生的原因
    -gcnew   监视新生代GC状况
    -gcnewcapacity 监视内容与-gcnew基本相同，输出主要关注使用的最大、最小空间
    -gcold  监视老年代GC状况
    -gcoldcapacity 监视内容与-gcold基本相同，输出主要关注使用到的最大最小空间
    -gcpermcapacity 输出永久代使用到的最大最小空间
    -compiler 输出JIT编译器编译过的方法、耗时等信息
    -printcompilation  输出已经被JIT编译的方法
    
jinfo: Configuration Info for java,显示虚拟机配置信息

jmap: Memory Map for Java,生成虚拟机的内存转出快照(heapdump文件)
jhat：JVM Heap Dump Browser，用于分析heapdump文件，它会建议一个Http/html服务器，让用户可以在浏览器上查看分析结果
jstack： Stack Trace for Java，显示虚拟机的线程快照

jconsole
